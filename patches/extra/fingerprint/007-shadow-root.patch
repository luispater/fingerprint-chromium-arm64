diff --git a/third_party/blink/renderer/core/dom/element.cc b/third_party/blink/renderer/core/dom/element.cc
index 54013e7a94..da056fc1a5 100644
--- a/third_party/blink/renderer/core/dom/element.cc
+++ b/third_party/blink/renderer/core/dom/element.cc
@@ -5802,6 +5802,11 @@ ShadowRoot* Element::OpenShadowRoot() const {
   return root && root->GetMode() == ShadowRootMode::kOpen ? root : nullptr;
 }
 
+ShadowRoot* Element::FakeShadowRoot() const {
+  ShadowRoot* root = GetShadowRoot();
+  return root;
+}
+
 ShadowRoot* Element::ClosedShadowRoot() const {
   ShadowRoot* root = GetShadowRoot();
   if (!root) {
diff --git a/third_party/blink/renderer/core/dom/element.h b/third_party/blink/renderer/core/dom/element.h
index f835dfab2d..67e4057ed2 100644
--- a/third_party/blink/renderer/core/dom/element.h
+++ b/third_party/blink/renderer/core/dom/element.h
@@ -842,6 +842,7 @@ class CORE_EXPORT Element : public ContainerNode, public Animatable {
   // Returns the shadow root attached to this element if it is a shadow host.
   ShadowRoot* GetShadowRoot() const;
   ShadowRoot* OpenShadowRoot() const;
+  ShadowRoot* FakeShadowRoot() const;
   ShadowRoot* ClosedShadowRoot() const;
   ShadowRoot* AuthorShadowRoot() const;
   ShadowRoot* UserAgentShadowRoot() const;
diff --git a/third_party/blink/renderer/core/dom/element.idl b/third_party/blink/renderer/core/dom/element.idl
index 2e1d194f76..4debe0a2ed 100644
--- a/third_party/blink/renderer/core/dom/element.idl
+++ b/third_party/blink/renderer/core/dom/element.idl
@@ -65,6 +65,7 @@ dictionary CheckVisibilityOptions {
 
     [RaisesException, MeasureAs=ElementAttachShadow] ShadowRoot attachShadow(ShadowRootInit shadowRootInitDict);
     [PerWorldBindings, ImplementedAs=OpenShadowRoot] readonly attribute ShadowRoot? shadowRoot;
+    [PerWorldBindings, ImplementedAs=FakeShadowRoot] readonly attribute ShadowRoot? fakeShadowRoot;
 
     [RaisesException] Element? closest(DOMString selectors);
     [RaisesException] boolean matches(DOMString selectors);
